name: Build Test and push
on: [ push ]
env:
  IMAGE_NAME: student_service
  REPO_NAME: jasonchristo99
#  MONGO_URI: "mongodb://172.17.0.2:27017/"


jobs:
  build:
    runs-on: ubuntu-latest
#    services:
#      mongo:
#        image: mongo:4
#        ports:
#          - 27017:27017
#        options: >-
#          --health-cmd mongo
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
    steps:
      - uses: actions/checkout@v2

#      - name: Get MongoDB container's IP address
#        id: mongo_ip
#        run: |
#          MONGO_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -q --filter "ancestor=mongo:4"))
#          echo "MONGO_IP=$MONGO_IP" >> $GITHUB_ENV
#
#      - name: Set MONGO_URI
#        run: echo "MONGO_URI=mongodb://$MONGO_IP:27017/" >> $GITHUB_ENV

      - name: Create mongoDB Docker container
        run: sudo docker run -d --rm --name my_mongo -p 27017:27017 mongo:4

#      - name: Start MongoDB
#          uses: supercharge/mongodb-github-action@1.10.0
#          with:
#            mongodb-version: 4

      - name: Get MongoDB container's IP address
        id: mongo_ip
        run: |
          echo "MONGO_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' my_mongo)" >> $GITHUB_ENV
          echo "MONGO_IP: $MONGO_IP"

      - name: Set MONGO_URI
        run: |
          echo "MONGO_URI=mongodb://$MONGO_IP:27017/" >> $GITHUB_ENV
          echo "MONGO_URI: $MONGO_URI"

#      - name: Build docker
#        run: |
#          docker build . -t $REPO_NAME/$IMAGE_NAME
#      - name: run docker
#        run: |
#          docker run -d -p 8080:8080 -e MONGO_URI=$MONGO_URI $REPO_NAME/$IMAGE_NAME:latest && \
#            docker ps && sleep 5
#
#      - name: Display Docker network information
#        run: |
#          echo "Networks:"
#          docker network ls
#          echo "Network details for student_service container:"
#          docker inspect -f '{{json .NetworkSettings.Networks}}' $(docker ps -q --filter "ancestor=$REPO_NAME/$IMAGE_NAME:latest")
#          echo "Network details for mongo container:"
#          docker inspect -f '{{json .NetworkSettings.Networks}}' $(docker ps -q --filter "ancestor=mongo:4")
#
#
#      - name: "Check files existence"
#        uses: andstor/file-existence-action@v2
#        with:
#          files: "postman/collection.json,postman/environment.json"
#          fail: true
#
#      - name: Run API Tests
#        id: run-newman
#        uses: anthonyvscode/newman-action@master
#        with:
#          collection: postman/collection.json
#          environment: postman/environment.json
#          reporters: cli
#          bail: true
#
#      - name: Check if we failed
#        id: fail-check
#        shell: bash
#        env:
#          JSON_DOC: ${{ steps.run-newman.outputs.summary }}
#        run: |
#          printf '%s\n' "$JSON_DOC" > summary.json
#          cat summary.json
#          if grep -q Collection summary.json; then
#            echo "failed=false" >> $GITHUB_OUTPUT;
#          else
#            echo "failed=true" >> $GITHUB_OUTPUT;
#          fi
#
#      - name: fail if empty
#        if: ${{ steps.fail-check.outputs.failed == 'true' }}
#        run: exit 1
#
#      - name: Login to Container Registry
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.REGISTRY_USERNAME }}
#          password: ${{ secrets.REGISTRY_PASSWORD }}
#
#      - name: Push image to docker hub Container Registry
#        run: |
#          docker push $REPO_NAME/$IMAGE_NAME